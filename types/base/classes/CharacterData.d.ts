import Constructable from '../Constructable';
import InternalHandler from '../InternalHandler';
import { INode, IChildNode, INonDocumentTypeChildNode, ICharacterData } from '../interfaces';
import { INodeProperties, INodeReadonlyProperties } from './Node';
import { IChildNodeProperties, IChildNodeReadonlyProperties } from '../mixins/ChildNode';
import { INonDocumentTypeChildNodeProperties, INonDocumentTypeChildNodeReadonlyProperties } from '../mixins/NonDocumentTypeChildNode';
export declare const getState: (instance: ICharacterData) => any, setState: <P = ICharacterDataProperties>(instance: ICharacterData, properties: P) => void, setHiddenState: <IHiddenProperties extends {}>(instance: ICharacterData, properties: IHiddenProperties) => void, setReadonlyOfCharacterData: (instance: ICharacterData, properties: ICharacterDataReadonlyProperties) => void;
export declare const internalHandler: InternalHandler<ICharacterData>;
export declare function CharacterDataGenerator(Node: Constructable<INode>, ChildNode: Constructable<IChildNode>, NonDocumentTypeChildNode: Constructable<INonDocumentTypeChildNode>): {
    new (): {
        data: string;
        readonly length: number;
        appendData(data: string): void;
        deleteData(offset: number, count: number): void;
        insertData(offset: number, data: string): void;
        replaceData(offset: number, count: number, data: string): void;
        substringData(offset: number, count: number): string;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: string;
        readonly childNodes: import("../interfaces").INodeList<INode>;
        readonly firstChild: INode | null;
        readonly isConnected: boolean;
        readonly lastChild: INode | null;
        readonly nextSibling: INode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly ownerDocument: import("../interfaces").IDocument | null;
        readonly parentElement: import("../interfaces").IElement | null;
        readonly parentNode: INode | null;
        readonly previousSibling: INode | null;
        textContent: string | null;
        appendChild(node: INode): INode;
        cloneNode(deep?: boolean | undefined): INode;
        compareDocumentPosition(other: INode): number;
        contains(other: INode | null): boolean;
        getRootNode(options?: import("../interfaces").IGetRootNodeOptions | undefined): INode;
        hasChildNodes(): boolean;
        insertBefore(node: INode, child: INode | null): INode;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: INode | null): boolean;
        isSameNode(otherNode: INode | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild(child: INode): INode;
        replaceChild(node: INode, child: INode): INode;
        dispatchEvent(event: import("../interfaces").IEvent): boolean;
        after(...nodes: (string | INode)[]): void;
        before(...nodes: (string | INode)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | INode)[]): void;
        readonly nextElementSibling: import("../interfaces").IElement | null;
        readonly previousElementSibling: import("../interfaces").IElement | null;
    };
};
export interface ICharacterDataProperties extends INodeProperties, IChildNodeProperties, INonDocumentTypeChildNodeProperties {
    data?: string;
    length?: number;
}
export interface ICharacterDataReadonlyProperties extends INodeReadonlyProperties, IChildNodeReadonlyProperties, INonDocumentTypeChildNodeReadonlyProperties {
    length?: number;
}
export declare const CharacterDataPropertyKeys: string[];
export declare const CharacterDataConstantKeys: string[];
