import { IAttr, IElement, IHTMLElement, ISVGElement, IHTMLCollection, IDOMTokenList, IDocument } from '../../base/interfaces';
declare const GeneratedElement: {
    new (): {
        readonly attributes: import("../../base/interfaces").INamedNodeMap;
        readonly classList: IDOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        outerHTML: string;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: import("../../base/interfaces").IShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: import("../../base/interfaces").IShadowRootInit): import("../../base/interfaces").IShadowRoot;
        closest(selectors: string): IElement | null;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): Iterable<string>;
        getAttributeNode(qualifiedName: string): IAttr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): IAttr | null;
        getBoundingClientRect(): import("../../base/interfaces").IDOMRect;
        getClientRects(): import("../../base/interfaces").IDOMRectList;
        getElementsByClassName(classNames: string): IHTMLCollection<IElement>;
        getElementsByTagName(qualifiedName: string): IHTMLCollection<IElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): IHTMLCollection<IElement>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        insertAdjacentElement(where: string, element: IElement): IElement | null;
        insertAdjacentHTML(position: string, text: string): void;
        insertAdjacentText(where: string, data: string): void;
        matches(selectors: string): boolean;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: IAttr): IAttr;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: IAttr): IAttr | null;
        setAttributeNodeNS(attr: IAttr): IAttr | null;
        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: string;
        readonly childNodes: import("../../base/interfaces").INodeList<import("../../base/interfaces").INode>;
        readonly firstChild: import("../../base/interfaces").INode | null;
        readonly isConnected: boolean;
        readonly lastChild: import("../../base/interfaces").INode | null;
        readonly nextSibling: import("../../base/interfaces").INode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly ownerDocument: IDocument | null;
        readonly parentElement: IElement | null;
        readonly parentNode: import("../../base/interfaces").INode | null;
        readonly previousSibling: import("../../base/interfaces").INode | null;
        textContent: string | null;
        appendChild(node: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        cloneNode(deep?: boolean | undefined): import("../../base/interfaces").INode;
        compareDocumentPosition(other: import("../../base/interfaces").INode): number;
        contains(other: import("../../base/interfaces").INode | null): boolean;
        getRootNode(options?: import("../../base/interfaces").IGetRootNodeOptions | undefined): import("../../base/interfaces").INode;
        hasChildNodes(): boolean;
        insertBefore(node: import("../../base/interfaces").INode, child: import("../../base/interfaces").INode | null): import("../../base/interfaces").INode;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: import("../../base/interfaces").INode | null): boolean;
        isSameNode(otherNode: import("../../base/interfaces").INode | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild(child: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        replaceChild(node: import("../../base/interfaces").INode, child: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        dispatchEvent(event: import("../../base/interfaces").IEvent): boolean;
        after(...nodes: (string | import("../../base/interfaces").INode)[]): void;
        before(...nodes: (string | import("../../base/interfaces").INode)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | import("../../base/interfaces").INode)[]): void;
        readonly nextElementSibling: IElement | null;
        readonly previousElementSibling: IElement | null;
        readonly childElementCount: number;
        readonly children: IHTMLCollection<IElement>;
        readonly firstElementChild: IElement | null;
        readonly lastElementChild: IElement | null;
        append(...nodes: (string | import("../../base/interfaces").INode)[]): void;
        prepend(...nodes: (string | import("../../base/interfaces").INode)[]): void;
        querySelector(selectors: string): IElement | null;
        querySelectorAll(selectors: string): import("../../base/interfaces").INodeList<import("../../base/interfaces").INode>;
        readonly assignedSlot: import("../../base/interfaces").IHTMLSlotElement | null;
    };
};
export default class Element extends GeneratedElement implements IElement {
    constructor();
    get classList(): IDOMTokenList;
    get className(): string;
    get id(): string;
    get outerHTML(): string;
    get innerHTML(): string;
    closest(selectors: string): IElement | null;
    getAttribute(qualifiedName: string): string | null;
    getAttributeNS(namespace: string | null, localName: string): string | null;
    getAttributeNode(name: string): IAttr | null;
    getAttributeNodeNS(namespaceURI: string, localName: string): IAttr | null;
    getElementsByClassName(classNames: string): IHTMLCollection;
    getElementsByTagName(qualifiedName: string): IHTMLCollection<IElement | any>;
    getElementsByTagNameNS(namespaceURI: string, localName: string): IHTMLCollection<IHTMLElement | ISVGElement>;
    hasAttribute(qualifiedName: string): boolean;
    hasAttributeNS(namespace: string | null, localName: string): boolean;
    hasAttributes(): boolean;
    removeAttribute(qualifiedName: string): void;
    removeAttributeNS(namespace: string | null, localName: string): void;
    removeAttributeNode(attr: IAttr): IAttr;
    setAttribute(qualifiedName: string, value: string): void;
    setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
    setAttributeNode(attr: IAttr): IAttr | null;
    setAttributeNodeNS(attr: IAttr): IAttr | null;
}
export {};
