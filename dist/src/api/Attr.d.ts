import { IAttr } from '../../base/interfaces';
declare const Attr_base: {
    new (): {
        readonly localName: string;
        readonly name: string;
        readonly namespaceURI: string | null;
        readonly ownerElement: import("../../base/interfaces").IElement | null;
        readonly prefix: string | null;
        readonly specified: boolean;
        value: string;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: string;
        readonly childNodes: import("../../base/interfaces").INodeList<import("../../base/interfaces").INode>;
        readonly firstChild: import("../../base/interfaces").INode | null;
        readonly isConnected: boolean;
        readonly lastChild: import("../../base/interfaces").INode | null;
        readonly nextSibling: import("../../base/interfaces").INode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly ownerDocument: import("../../base/interfaces").IDocument | null;
        readonly parentElement: import("../../base/interfaces").IElement | null;
        readonly parentNode: import("../../base/interfaces").INode | null;
        readonly previousSibling: import("../../base/interfaces").INode | null;
        textContent: string | null;
        appendChild(node: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        cloneNode(deep?: boolean | undefined): import("../../base/interfaces").INode;
        compareDocumentPosition(other: import("../../base/interfaces").INode): number;
        contains(other: import("../../base/interfaces").INode | null): boolean;
        getRootNode(options?: import("../../base/interfaces").IGetRootNodeOptions | undefined): import("../../base/interfaces").INode;
        hasChildNodes(): boolean;
        insertBefore(node: import("../../base/interfaces").INode, child: import("../../base/interfaces").INode | null): import("../../base/interfaces").INode;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: import("../../base/interfaces").INode | null): boolean;
        isSameNode(otherNode: import("../../base/interfaces").INode | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild(child: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        replaceChild(node: import("../../base/interfaces").INode, child: import("../../base/interfaces").INode): import("../../base/interfaces").INode;
        dispatchEvent(event: import("../../base/interfaces").IEvent): boolean;
    };
};
export default class Attr extends Attr_base implements IAttr {
    constructor();
    get value(): string;
    set value(value: string);
    appendChild(node: IAttr): IAttr;
    hasChildNodes(): boolean;
    insertBefore(node: IAttr, child: IAttr | null): IAttr;
    isEqualNode(otherNode: IAttr | null): boolean;
    normalize(): void;
    removeChild(child: IAttr): IAttr;
    replaceChild(node: IAttr, child: IAttr): IAttr;
}
export {};
