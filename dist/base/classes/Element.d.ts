import Constructable from '../Constructable';
import InternalHandler from '../InternalHandler';
import { INode, IChildNode, INonDocumentTypeChildNode, IParentNode, ISlotable, IDOMTokenList, INamedNodeMap, IShadowRoot, IAttr, IShadowRootInit, IElement, IHTMLCollection, IDOMRectList, IDOMRect } from '../interfaces';
import { INodeProperties, INodeReadonlyProperties } from './Node';
import { IChildNodeProperties, IChildNodeReadonlyProperties } from '../mixins/ChildNode';
import { INonDocumentTypeChildNodeProperties, INonDocumentTypeChildNodeReadonlyProperties } from '../mixins/NonDocumentTypeChildNode';
import { IParentNodeProperties, IParentNodeReadonlyProperties } from '../mixins/ParentNode';
import { ISlotableProperties, ISlotableReadonlyProperties } from '../mixins/Slotable';
export declare const getState: (instance: IElement) => any, setState: <P = IElementProperties>(instance: IElement, properties: P) => void, setHiddenState: <IHiddenProperties extends {}>(instance: IElement, properties: IHiddenProperties) => void, setReadonlyOfElement: (instance: IElement, properties: IElementReadonlyProperties) => void;
export declare const internalHandler: InternalHandler<IElement>;
export declare function ElementGenerator(Node: Constructable<INode>, ChildNode: Constructable<IChildNode>, NonDocumentTypeChildNode: Constructable<INonDocumentTypeChildNode>, ParentNode: Constructable<IParentNode>, Slotable: Constructable<ISlotable>): {
    new (): {
        readonly attributes: INamedNodeMap;
        readonly classList: IDOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        innerHTML: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        outerHTML: string;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: IShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: IShadowRootInit): IShadowRoot;
        closest(selectors: string): IElement | null;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): Iterable<string>;
        getAttributeNode(qualifiedName: string): IAttr | null;
        getAttributeNodeNS(namespace: string | null, localName: string): IAttr | null;
        getBoundingClientRect(): IDOMRect;
        getClientRects(): IDOMRectList;
        getElementsByClassName(classNames: string): IHTMLCollection<IElement>;
        getElementsByTagName(qualifiedName: string): IHTMLCollection<IElement>;
        getElementsByTagNameNS(namespace: string | null, localName: string): IHTMLCollection<IElement>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        insertAdjacentElement(where: string, element: IElement): IElement | null;
        insertAdjacentHTML(position: string, text: string): void;
        insertAdjacentText(where: string, data: string): void;
        matches(selectors: string): boolean;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: IAttr): IAttr;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: IAttr): IAttr | null;
        setAttributeNodeNS(attr: IAttr): IAttr | null;
        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        readonly baseURI: string;
        readonly childNodes: import("../interfaces").INodeList<INode>;
        readonly firstChild: INode | null;
        readonly isConnected: boolean;
        readonly lastChild: INode | null;
        readonly nextSibling: INode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly ownerDocument: import("../interfaces").IDocument | null;
        readonly parentElement: IElement | null;
        readonly parentNode: INode | null;
        readonly previousSibling: INode | null;
        textContent: string | null;
        appendChild(node: INode): INode;
        cloneNode(deep?: boolean | undefined): INode;
        compareDocumentPosition(other: INode): number;
        contains(other: INode | null): boolean;
        getRootNode(options?: import("../interfaces").IGetRootNodeOptions | undefined): INode;
        hasChildNodes(): boolean;
        insertBefore(node: INode, child: INode | null): INode;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: INode | null): boolean;
        isSameNode(otherNode: INode | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild(child: INode): INode;
        replaceChild(node: INode, child: INode): INode;
        dispatchEvent(event: import("../interfaces").IEvent): boolean;
        after(...nodes: (string | INode)[]): void;
        before(...nodes: (string | INode)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | INode)[]): void;
        readonly nextElementSibling: IElement | null;
        readonly previousElementSibling: IElement | null;
        readonly childElementCount: number;
        readonly children: IHTMLCollection<IElement>;
        readonly firstElementChild: IElement | null;
        readonly lastElementChild: IElement | null;
        append(...nodes: (string | INode)[]): void;
        prepend(...nodes: (string | INode)[]): void;
        querySelector(selectors: string): IElement | null;
        querySelectorAll(selectors: string): import("../interfaces").INodeList<INode>;
        readonly assignedSlot: import("../interfaces").IHTMLSlotElement | null;
    };
};
export interface IElementProperties extends INodeProperties, IChildNodeProperties, INonDocumentTypeChildNodeProperties, IParentNodeProperties, ISlotableProperties {
    attributes?: INamedNodeMap;
    classList?: IDOMTokenList;
    className?: string;
    clientHeight?: number;
    clientLeft?: number;
    clientTop?: number;
    clientWidth?: number;
    id?: string;
    innerHTML?: string;
    localName?: string;
    namespaceURI?: string | null;
    outerHTML?: string;
    prefix?: string | null;
    scrollHeight?: number;
    scrollLeft?: number;
    scrollTop?: number;
    scrollWidth?: number;
    shadowRoot?: IShadowRoot | null;
    slot?: string;
    tagName?: string;
}
export interface IElementReadonlyProperties extends INodeReadonlyProperties, IChildNodeReadonlyProperties, INonDocumentTypeChildNodeReadonlyProperties, IParentNodeReadonlyProperties, ISlotableReadonlyProperties {
    attributes?: INamedNodeMap;
    classList?: IDOMTokenList;
    clientHeight?: number;
    clientLeft?: number;
    clientTop?: number;
    clientWidth?: number;
    localName?: string;
    namespaceURI?: string | null;
    prefix?: string | null;
    scrollHeight?: number;
    scrollWidth?: number;
    shadowRoot?: IShadowRoot | null;
    tagName?: string;
}
export declare const ElementPropertyKeys: string[];
export declare const ElementConstantKeys: string[];
