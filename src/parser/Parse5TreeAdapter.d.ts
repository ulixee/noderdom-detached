import { IDocument, IDOMImplementation, IElement, INode, IParentNode, IDocumentFragment, IText, IComment, IDocumentType, IChildNode } from '../../base/interfaces';
import './PatchedOpenElementStack';
import ITreeAdapter, { IAttribute, IDocumentMode } from './ITreeAdapter';
export default class Parse5TreeAdapter implements ITreeAdapter {
    private readonly implementation;
    private readonly document;
    private currentElement;
    constructor(domImplementation: IDOMImplementation, document: IDocument);
    createDocument(): IDocument;
    createDocumentFragment(): IDocumentFragment;
    createElement(tagName: string, namespaceURI: string, attrs: IAttribute[]): any;
    createCommentNode(data: string): IComment;
    appendChild(parentNode: INode & IParentNode, newNode: INode): void;
    insertBefore(parentNode: INode & IParentNode, newNode: INode, referenceNode: INode): void;
    setTemplateContent(templateElement: IElement, contentFragment: IDocumentFragment): void;
    getTemplateContent(templateElement: IElement): IElement;
    setDocumentType(document: IDocument, name: string, publicId: string, systemId: string): void;
    setDocumentMode(document: IDocument, mode: IDocumentMode): void;
    getDocumentMode(document: IDocument): "no-quirks" | "quirks";
    detachNode(node: INode): void;
    insertText(parentNode: INode & IParentNode, text: string): void;
    insertTextBefore(parentNode: INode & IParentNode, text: string, referenceNode: INode): void;
    adoptAttributes(element: IElement, attrs: IAttribute[]): void;
    getFirstChild(node: INode): INode & IChildNode;
    getChildNodes(node: INode): (INode & IChildNode)[];
    getParentNode(node: INode): INode & IParentNode;
    getAttrList(node: IElement): import("../../base/interfaces").INamedNodeMap;
    getTagName(element: IElement): string;
    getNamespaceURI(element: IElement): string | null;
    getTextNodeContent(node: IText): string;
    getCommentNodeContent(node: IComment): string;
    getDocumentTypeNodeName(node: IDocumentType): string;
    getDocumentTypeNodePublicId(node: IDocumentType): string;
    getDocumentTypeNodeSystemId(node: IDocumentType): string;
    isTextNode(node: INode): boolean;
    isCommentNode(node: INode): boolean;
    isDocumentTypeNode(node: INode): boolean;
    isElementNode(node: INode): boolean;
    pushedOnStack(_args: any, currentElement: IElement): void;
    poppedOffStack(_args: any, currentElement: IElement): void;
    private ownerDocument;
    private findNodeToReplace;
}
